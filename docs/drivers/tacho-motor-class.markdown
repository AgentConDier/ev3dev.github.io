---
autogen: This file was automatically generated by kernel-doc-text-to-markdown.py
kernel_version: 3.16.7-ckt21-9-ev3dev-ev3
source_file: drivers/lego/motors/tacho_motor_class.c
title: Tacho Motor Class
---

The `tacho-motor` class provides a uniform interface for using motors with
positional and directional feedback such as the EV3 and NXT motors. This
feedback allows for precise control of the motors.

### sysfs Attributes

Tacho motors can be found at `/sys/class/tacho-motor/motor<N>`, where `<N>`
is incremented each time a motor is loaded (it is not related to which port
the motor is plugged in to).

`address`
: (read-only) Returns the name of the port that the motor is connected to.

`command`
: (write-only) Sends a command to the motor controller. Possible values are:

    - `run-forever`: Causes the motor to run until another command is sent.
    - `run-to-abs-pos`: Runs the motor to an absolute position specified by
      `position_sp` and then stops the motor using the command specified in
      `stop_command`.
    - `run-to-rel-pos`: Runs the motor to a position relative to the current
      `position` value. The new position will be current `position` +
      `position_sp`. When the new position is reached, the motor will stop
       using the command specified by `stop_command`.
    - `run-timed`: Run the motor for the amount of time specified in
      `time_sp` and then stops the motor using the command specified by
      `stop_command`.
    - `run-direct`: Runs the motor using the duty cycle specified by
      `duty_cycle_sp`. Unlike other run commands, changing `duty_cycle_sp`
       while running *will* take effect immediately.
    - `stop`: Stop any of the run commands before they are complete using
      the command specified by `stop_command`.
    - `reset`: Resets all of the motor parameter attributes to their default
       values. This will also have the effect of stopping the motor.

    Not all commands may be supported. Read the `commands` attribute to get
    the list of commands supported by a particular driver.

`commands`
: (read-only) Returns a space separated list of commands that are supported
by the motor controller.

`count_per_rot`
: (read-only) Returns the number of tacho counts in one rotation of the
motor. Tacho counts are used by the position and speed attributes, so you
can use this value to convert from rotations or degrees to tacho counts.
In the case of linear actuators, the units here will be counts per
centimeter.

`driver_name`
: (read-only) Returns the name of the driver that provides this tacho motor
device.

`duty_cycle`
: (read-only) Returns the current duty cycle of the motor. Units are percent.
Values are -100 to 100.

`duty_cycle_sp`
: (read/write) Writing sets the duty cycle setpoint. Reading returns the
current value. Units are in percent. Valid values are -100 to 100. A
negative value causes the motor to rotate in reverse with the exception
of positioning commands. For `run-to-abs-pos` and `run-to-rel-pos` the
sign is ignored. This value is only used when `speed_regulation` is off.

`encoder_polarity`
: (read/write) Sets the polarity of the rotary encoder. This is an advanced
feature to use motors that send inverted encoder signals to the EV3. This
should be set correctly by the driver of a device. It You only need to
change this value if you are using a unsupported device. Valid values are
`normal` and `inversed`.

`polarity`
: (read/write) Sets the polarity of the motor. Valid values are:

    - `normal`: A positive duty cycle will cause the motor to rotate
      clockwise.
    - `inversed`: A positive duty cycle will cause the motor to rotate
       counter-clockwise.

`position`
: (read/write) Returns the current position of the motor in pulses of the
rotary encoder. When the motor rotates clockwise, the position will
increase. Likewise, rotating counter-clockwise causes the position to
decrease. Writing will set the position to that value. The range is
-2,147,483,648 and +2,147,483,647 tachometer counts (32-bit signed integer).

`hold_pid/Kd`
: (read/write) The derivative constant for the position PID.

`hold_pid/Ki`
: (read/write) The integral constant for the position PID.

`hold_pid/Kp`
: (read/write) The proportional constant for the position PID.

`position_sp`
: (read/write) Writing specifies the target position for the `run-to-abs-pos`
and `run-to-rel-pos` commands. Reading returns the current value. Units are
in tacho counts. You can use the value returned by `counts_per_rot` to
convert tacho counts to/from rotations or degrees. The range is
-2,147,483,648 and +2,147,483,647 tachometer counts (32-bit signed integer).

`speed`
: (read-only) Returns the current motor speed in tacho counts per second.
Note, this is not necessarily degrees (although it is for LEGO motors).
Use the `count_per_rot` attribute to convert this value to RPM or deg/sec.

`speed_sp`
: (read/write) Writing sets the target speed in tacho counts per second used
when `speed_regulation` is on. Reading returns the current value. A
negative value causes the motor to rotate in reverse with the exception of
positioning commands. For `run-to-abs-pos` and `run-to-rel-pos` the sign
is ignored. Use the `count_per_rot` attribute to convert RPM or deg/sec to
tacho counts per second.

`ramp_up_sp`
: (read/write) Writing sets the ramp up setpoint. Reading returns the current
value. Units are in milliseconds. When set to a value > 0, the motor will
ramp the power sent to the motor from 0 to 100% duty cycle over the span of
this setpoint when starting the motor. If the maximum duty cycle is limited
by `duty_cycle_sp` or speed regulation, the actual ramp time duration will
be less than the setpoint.

`ramp_down_sp`
: (read/write) Writing sets the ramp down setpoint. Reading returns the
current value. Units are in milliseconds. When set to a value > 0, the
motor will ramp the power sent to the motor from 100% duty cycle down to 0
over the span of this setpoint when stopping the motor. If the starting
duty cycle is less than 100%, the ramp time duration will be less than the
full span of the setpoint.

`speed_regulation`
: (read/write) Turns speed regulation on or off. Valid values are:

    - `on`: The motor controller will vary the power supplied to the motor
      to try to maintain the speed specified in `speed_sp`.
    - `off`: The controller will drive the motor using the duty cycle
      specified in `duty_cycle_sp`.

`speed_pid/Kd`
: (read/write) The derivative constant for the speed regulation PID.

`speed_pid/Ki`
: (read/write) The integral constant for the speed regulation PID.

`speed_pid/Kp`
: (read/write) The proportional constant for the speed regulation PID.

`state`
: (read-only) Reading returns a space separated list of state flags.
Possible flags are:

    - `running`: Power is being sent to the motor.
    - `ramping`: The motor is ramping up or down and has not yet reached a
      constant output level.
    - `holding`: The motor is not turning, but rather attempting to hold a
      fixed position.
    - `stalled`: The motor is not turning when it should be.

`stop_command`
: (read/write) Reading returns the current stop command. Writing sets the
stop command. The value determines the motors behavior when `command` is
set to `stop`. Possible values are:

    - `coast`: Removes power from the motor. The motor will freely coast to
       a stop.
    - `brake`: Removes power from the motor and creates a passive electrical
       load. This is usually done by shorting the motor terminals together.
       This load will absorb the energy from the rotation of the motors and
       cause the motor to stop more quickly than coasting.
    - `hold`: Causes the motor to actively try to hold the current position.
       If an external force tries to turn the motor, the motor will "push
       back" to maintain its position.

    Not all commands may be supported. Read `stop_commands` to get the
    commands available for a particular driver.

`stop_commands`
: (read-only) Returns a space-separated list of stop modes supported by the
motor controller.

`time_sp`
: (read/write) Writing specifies the amount of time the motor will run when
using the `run-timed` command. Reading returns the current value. Units
are in milliseconds.

