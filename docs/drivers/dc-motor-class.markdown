---
autogen: This file was automatically generated by kernel-doc-text-to-markdown.py
kernel_version: 3.16.7-ckt19-8-ev3dev-ev3
source_file: drivers/lego/motors/dc_motor_class.c
title: DC Motor Class
---

The `dc-motor` class provides a uniform interface for using regular DC motors
with no fancy controls or feedback. This includes LEGO MINDSTORMS RCX motors
and LEGO Power Functions motors.

### sysfs Attributes

DC motors can be found at `/sys/class/dc-motor/motor<N>`, where `<N>`
is incremented each time a motor is loaded (it is not related to which port
the motor is plugged in to).

`command` (write-only)
: Sets the command for the motor. Possible values are `run-forever`,
`run-timed`, `run-direct` and `stop`. Not all commands may be supported.
`run-forever` will cause the motor to run until another command is sent.
`run-timed` will run the motor for the amount of time specified in `time_sp`
and then stop the motor using the command specified by `stop_command`.
`run-direct` will run the motor at the duty cycle specified by `duty_cycle_sp`.
Unlike other run commands, changing `duty_cycle_sp` while running *will*
take effect immediately.
`stop` will stop any of the run commands before they are complete using the
command specified by `stop_command`.

`commands` (read-only)
: Returns a space separated list of commands supported by the motor
controller.

`driver_name` (read-only)
: Returns the name of the motor driver that loaded this device. See the list
of [supported devices] for a list of drivers.

`duty_cycle` (read)
: Shows the current duty cycle of the PWM signal sent to the motor. Values
are -100 to 100 (-100% to 100%).

`duty_cycle_sp` (read/write)
: Writing sets the duty cycle setpoint of the PWM signal sent to the motor.
Valid values are -100 to 100 (-100% to 100%). Reading returns the current
setpoint.

`polarity`: (read/write)
: Sets the polarity of the motor. Valid values are `normal` and `inversed`.

`port_name` (read-only)
: Returns the name of the port that the motor is connected to.

`state` (read-only)
: Gets a space separated list of flags indicating the motor status. Possible
flags are `running` and `ramping`. `running` indicates that the motor is
powered. `ramping` indicates that the motor has not yet reached the
`duty_cycle_sp`.

`stop_command` (write-only)
: Sets the stop command that will be used when the motor stops. Read
`stop_commands` to get the list of valid values.

`stop_commands` (read-only)
: Gets a space separated list of stop commands. Valid values are `coast`
and `brake`.

`ramp_down_sp` (read/write)
: Sets the time in milliseconds that it take the motor to ramp down from 100%
to 0%. Valid values are 0 to 10000 (10 seconds). Default is 0.

`ramp_up_sp` (read/write)
: Sets the time in milliseconds that it take the motor to up ramp from 0% to
100%. Valid values are 0 to 10000 (10 seconds). Default is 0.

`time_sp`: (read/write)
: Sets the time setpoint used with the `run-timed` command. Units are in
milliseconds.

[supported devices]: /docs/motors/#supported-devices

