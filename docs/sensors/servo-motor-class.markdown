---
autogen: This file was automatically generated by kernel-doc-text-to-markdown.py
title: Servo Motor Class
---

The `servo_motor` class provides a uniform interface for using [hobby type
servo motors](https://en.wikipedia.org/wiki/Servo_%28radio_control%29).
The interface is designed for 180 degree rotation servos, but can be used
with 90 degree and continuous rotation servos as well.

### sysfs Attributes

Servo motors can be found at `/sys/class/servo_motor/servo<N>`, where `<N>`
is incremented each time a servo is loaded (it is not related to which port
the motor is plugged in to).

`max_pulse_ms` (read/write)
: Used to set the pulse size in milliseconds for the signal that tells the
    servo to drive to the 180 degree position. Default value is 2400. Valid
    values are 2300 to 2700. You must write to the position attribute for
    changes to this attribute to take effect.

`mid_pulse_ms` (read/write)
: Used to set the pulse size in milliseconds for the signal that tells the
    servo to drive to the 90 degree position. Default value is 1500. Valid
    values are 1300 to 1700. This is also the neutral position on continuous
    rotation servos. You must write to the position attribute for changes to
    this attribute to take effect.

`min_pulse_ms` (read/write)
: Used to set the pulse size in milliseconds for the signal that tells the
    servo to drive to the 0 degree position. Default value is 600. Valid
    values are 300 to 700. You must write to the position attribute for
    changes to this attribute to take effect.

`name` (read-only)
: Returns the name of the servo controller's driver.

`port_name` (read-only)
: Returns the name of the port that the motor is connected to.

`position` (read/write)
: Reading returns the current position of the servo. Writing instructs the
    servo to move to the specified position. Units are degrees * 10, i.e
    `1234` = 123.4 degrees. A value of `-1` means float (do not power) the
    motor.

`rate` (read/write)
: Sets the rate at which the servo travels the full range of 0 to 180 degrees.
    Units are in milliseconds. Example: Setting the rate to 2000 means that
    it will take the servo 1 second to move from 0 to 90 degrees. Note:
    Some servo controllers may not support this in which case reading and
    writing will fail with -ENOSYS. In continuous rotation servos, this
    value will affect the rate at which the speed ramps up or down.
